//
//  GameViewController.swift
//  TankDefender
//
//  Created by Gus Johannesen on 5/7/25.
//

import SpriteKit
import AVFoundation
import Foundation


class GameScene: SKScene, SKPhysicsContactDelegate {
    var hero: Hero!
    var joystick: Joystick!
    var backgroundMusicPlayer: AVAudioPlayer?
    var cameraNode: SKCameraNode!
    let fruitNames = ["Pineapple", "Strawberry", "Apple", "Banana"]
    var score = 0
    var scoreLabel: SKLabelNode!
    
    
    
    override func didMove(to view: SKView) {
        physicsWorld.contactDelegate = self
        physicsBody = SKPhysicsBody(edgeLoopFrom: frame)
        physicsWorld.gravity = .zero
        
        // init camera
        cameraNode = SKCameraNode()
        self.camera = cameraNode
        addChild(cameraNode)
        
        spawnFruits()
        setupBackground()
        setupHero()
        setupJoystick()
        spawnEnemies()
        playBackgroundMusic()
        
        // keeping score of collected fruit
        scoreLabel = SKLabelNode(fontNamed: "AvenirNext-Bold")
        scoreLabel.fontSize = 40
        scoreLabel.fontColor = .white
        scoreLabel.position = CGPoint(x: 0, y: size.height / 2 - 100)
        scoreLabel.text = "Score: 0"
        cameraNode.addChild(scoreLabel)
        
    }
    
    func playBackgroundMusic() {
        if let musicURL = Bundle.main.url(forResource: "backgroundMusic", withExtension: "mp3") {
            do {
                backgroundMusicPlayer = try AVAudioPlayer(contentsOf: musicURL)
                backgroundMusicPlayer?.numberOfLoops = -1  // Loop indefinitely
                backgroundMusicPlayer?.volume = 0.5
                backgroundMusicPlayer?.play()
            } catch {
                print("Could not load music file: \(error)")
            }
        } else {
            print("Music file not found.")
        }
    }
    
    
    // background image generated by Copilot 
    func setupBackground() {
        let bg = SKSpriteNode(imageNamed: "Background")
        bg.position = CGPoint(x: 0, y: 0)  // Center of the world
        bg.zPosition = -1
        bg.size = CGSize(width: 5000, height: 5000)  // Large enough to scroll
        addChild(bg)
    }
    
    
    
    func setupHero() {
        hero = Hero()
        hero.position = CGPoint(x: size.width/2, y: size.height * 0.2)
        addChild(hero)
    }
    
    func setupJoystick() {
        joystick = Joystick()
        joystick.position = CGPoint(x: -size.width / 2 + 100, y: -size.height / 2 + 100)
        cameraNode.addChild(joystick)
    }
    
    
    func spawnEnemies() {
        // Add logic to spawn enemies
    }
    
    func spawnFruits(count: Int = 100) {
        for _ in 0..<count {
            let fruitName = fruitNames.randomElement()!
            let fruit = SKSpriteNode(imageNamed: fruitName)
            fruit.name = "fruit"
            fruit.zPosition = 1
            fruit.setScale(0.5)
            
            let randomX = CGFloat.random(in: -2500...2500)
            let randomY = CGFloat.random(in: -2500...2500)
            fruit.position = CGPoint(x: randomX, y: randomY)
            
            fruit.physicsBody = SKPhysicsBody(circleOfRadius: fruit.size.width)
            fruit.physicsBody?.isDynamic = false
            fruit.physicsBody?.categoryBitMask = PhysicsCategory.fruit
            fruit.physicsBody?.contactTestBitMask = PhysicsCategory.hero
            fruit.physicsBody?.collisionBitMask = 0
            
            
            addChild(fruit)
        }
    }
    
    
    override func update(_ currentTime: TimeInterval) {
        hero.update(joystick: joystick)
        cameraNode.position = hero.position
    }
    
    
    func didBegin(_ contact: SKPhysicsContact) {
        let (bodyA, bodyB) = (contact.bodyA, contact.bodyB)
        
        let names = [bodyA.node?.name, bodyB.node?.name]
        
        if names.contains("fruit") && (bodyA.categoryBitMask == PhysicsCategory.hero || bodyB.categoryBitMask == PhysicsCategory.hero) {
            if let fruit = bodyA.node?.name == "fruit" ? bodyA.node : bodyB.node {
                fruit.removeFromParent()
                run(SKAction.playSoundFileNamed("shoot.wav",waitForCompletion: false)) //sound effect for collectable
                score += 1
                scoreLabel.text = "Score: \(score)"
            }
        }
    }
    
}
